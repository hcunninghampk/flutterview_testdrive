"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tools_1 = require("../tools");
/**
 * This plugin processes the **scoped-animation** tags.
 *
 * It replaces this:
 *
 * scoped-animation(:duration='Duration(seconds:1)' :model-fn='model.newAnimModel' model='MyAnimModel' state='anim')
 *     child
 *
 * With this:
 *
 * animated-model-controller(type='MyAnimModel' :duration='Duration(seconds:1)' :model-fn='model.createHeightAnimModel')
 *     function(as='builder' params='anim')
 *         child
 *
 * @param widget the widget tree to process
 * @param options the flutter-view options
 * @return the transformed widget tree
 */
function transformWidget(widget, options) {
    if (widget.name == 'ScopedAnimation') {
        const modelParam = tools_1.findParam(widget, 'model');
        const stateParam = tools_1.findParam(widget, 'state');
        const modelFnParam = tools_1.findParam(widget, 'modelFn');
        const durationParam = tools_1.findParam(widget, 'duration');
        const contextParam = tools_1.findParam(widget, 'context');
        const widgetParam = tools_1.findParam(widget, 'widget');
        const asParam = tools_1.findParam(widget, 'as');
        const children = tools_1.getWidgetChildren(widget);
        if (modelParam && modelFnParam && children.length > 0) {
            if (!durationParam.value)
                throw 'scoped-animation requires a duration';
            const model = modelParam.value.toString();
            const _modelFn = modelFnParam.value.toString();
            const _duration = durationParam.value.toString();
            const _state = stateParam ? stateParam.value : 'anim';
            const _context = contextParam ? contextParam.value : 'context';
            const _widget = widgetParam ? widgetParam.value : 'widget';
            const functionWidget = {
                class: 'widget',
                name: 'Function',
                constant: false,
                params: [
                    {
                        class: 'param',
                        type: 'expression',
                        name: 'as',
                        value: 'builder',
                        resolved: false
                    },
                    {
                        class: 'param',
                        type: 'literal',
                        name: 'params',
                        value: `${_context}, ${_widget}, ${_state}`,
                        resolved: true
                    },
                    {
                        class: 'param',
                        type: 'widgets',
                        name: 'children',
                        value: children,
                        resolved: true
                    }
                ]
            };
            widget.name = 'AnimatedModelController';
            widget.generics = [model];
            widget.params = [
                {
                    class: 'param',
                    type: 'expression',
                    name: 'duration',
                    resolved: false,
                    value: _duration
                },
                {
                    class: 'param',
                    type: 'expression',
                    name: 'modelFn',
                    resolved: true,
                    value: _modelFn
                },
                {
                    class: 'param',
                    type: 'widget',
                    name: 'child',
                    resolved: true,
                    value: functionWidget
                }
            ];
            if (asParam)
                widget.params.push(asParam);
        }
    }
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
