"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tools_1 = require("../tools");
const change_case_1 = require("change-case");
function transformWidget(widget, options) {
    const widthParam = tools_1.findAndRemoveParam(widget, 'width', {
        includeExpressions: false,
        includeResolved: true
    });
    const heightParam = tools_1.findAndRemoveParam(widget, 'height', {
        includeExpressions: false,
        includeResolved: true
    });
    const sizeParam = tools_1.findAndRemoveParam(widget, 'size', {
        includeExpressions: false,
        includeResolved: true
    });
    const fitParam = tools_1.findAndRemoveParam(widget, 'fit', {
        includeExpressions: false,
        includeResolved: true
    });
    const paddingParam = tools_1.findAndRemoveParam(widget, 'padding', {
        includeExpressions: false,
        includeResolved: true
    });
    const paddingTopParam = tools_1.findAndRemoveParam(widget, 'paddingTop');
    const paddingRightParam = tools_1.findAndRemoveParam(widget, 'paddingRight');
    const paddingBottomParam = tools_1.findAndRemoveParam(widget, 'paddingBottom');
    const paddingLeftParam = tools_1.findAndRemoveParam(widget, 'paddingLeft');
    const marginParam = tools_1.findAndRemoveParam(widget, 'margin', {
        includeExpressions: false,
        includeResolved: true
    });
    const marginTopParam = tools_1.findAndRemoveParam(widget, 'marginTop');
    const marginRightParam = tools_1.findAndRemoveParam(widget, 'marginRight');
    const marginBottomParam = tools_1.findAndRemoveParam(widget, 'marginBottom');
    const marginLeftParam = tools_1.findAndRemoveParam(widget, 'marginLeft');
    const borderRadiusParam = tools_1.findAndRemoveParam(widget, 'borderRadius', {
        includeExpressions: false,
        includeResolved: true
    });
    const alignmentParam = tools_1.findAndRemoveParam(widget, 'alignment', {
        includeExpressions: false,
        includeResolved: true
    });
    // dimensions
    if (sizeParam && sizeParam.value) {
        widget.params.push({
            class: 'param',
            name: 'size',
            type: 'expression',
            value: tools_1.parseStyleDoubleValue(sizeParam.value.toString()),
            resolved: true
        });
    }
    if (widthParam && widthParam.value) {
        widget.params.push({
            class: 'param',
            name: 'width',
            type: 'expression',
            value: tools_1.parseStyleDoubleValue(widthParam.value.toString()),
            resolved: true
        });
    }
    if (heightParam && heightParam.value) {
        widget.params.push({
            class: 'param',
            name: 'height',
            type: 'expression',
            value: tools_1.parseStyleDoubleValue(heightParam.value.toString()),
            resolved: true
        });
    }
    if (fitParam && fitParam.value) {
        widget.params.push({
            class: 'param',
            name: 'fit',
            type: 'expression',
            value: `BoxFit.${change_case_1.camelCase(fitParam.value.toString())}`,
            resolved: true
        });
    }
    // alignment
    if (alignmentParam && alignmentParam.value) {
        widget.params.push({
            class: 'param',
            name: 'alignment',
            type: 'expression',
            value: `Alignment.${change_case_1.camelCase(alignmentParam.value.toString())}`,
            resolved: true
        });
    }
    // padding
    let paddings = {};
    if (paddingParam && paddingParam.value) {
        paddings = tools_1.parseTRBLStyle(paddingParam.value.toString());
    }
    if (paddingTopParam && paddingTopParam.value) {
        paddings.top = paddingTopParam.value.toString();
    }
    if (paddingRightParam && paddingRightParam.value) {
        paddings.right = paddingRightParam.value.toString();
    }
    if (paddingBottomParam && paddingBottomParam.value) {
        paddings.bottom = paddingBottomParam.value.toString();
    }
    if (paddingLeftParam && paddingLeftParam.value) {
        paddings.left = paddingLeftParam.value.toString();
    }
    if (Object.keys(paddings).length > 0) {
        const params = [];
        if (paddings.top)
            params.push('top: ' + tools_1.parseStyleDoubleValue(paddings.top));
        if (paddings.right)
            params.push('right: ' + tools_1.parseStyleDoubleValue(paddings.right));
        if (paddings.bottom)
            params.push('bottom: ' + tools_1.parseStyleDoubleValue(paddings.bottom));
        if (paddings.left)
            params.push('left: ' + tools_1.parseStyleDoubleValue(paddings.left));
        const inset = `EdgeInsets.only(${params.join(', ')})`;
        widget.params.push({
            class: 'param',
            name: 'padding',
            type: 'expression',
            value: inset,
            resolved: true
        });
    }
    // margin
    let margins = {};
    if (marginParam && marginParam.value) {
        margins = tools_1.parseTRBLStyle(marginParam.value.toString());
    }
    if (marginTopParam && marginTopParam.value) {
        margins.top = marginTopParam.value.toString();
    }
    if (marginRightParam && marginRightParam.value) {
        margins.right = marginRightParam.value.toString();
    }
    if (marginBottomParam && marginBottomParam.value) {
        margins.bottom = marginBottomParam.value.toString();
    }
    if (marginLeftParam && marginLeftParam.value) {
        margins.left = marginLeftParam.value.toString();
    }
    if (Object.keys(margins).length > 0) {
        const params = [];
        if (margins.top)
            params.push('top: ' + tools_1.parseStyleDoubleValue(margins.top));
        if (margins.right)
            params.push('right: ' + tools_1.parseStyleDoubleValue(margins.right));
        if (margins.bottom)
            params.push('bottom: ' + tools_1.parseStyleDoubleValue(margins.bottom));
        if (margins.left)
            params.push('left: ' + tools_1.parseStyleDoubleValue(margins.left));
        const inset = `EdgeInsets.only(${params.join(', ')})`;
        widget.params.push({
            class: 'param',
            name: 'margin',
            type: 'expression',
            value: inset,
            resolved: true
        });
    }
    // border radius
    if (borderRadiusParam && borderRadiusParam.value)
        widget.params.push({
            class: 'param',
            name: 'borderRadius',
            type: 'expression',
            value: tools_1.toBorderRadiusCode(borderRadiusParam),
            resolved: true
        });
    // also apply the plugin to the rest of the widget tree of this widget
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
