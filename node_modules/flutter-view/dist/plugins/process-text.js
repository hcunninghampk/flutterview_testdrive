"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tools_1 = require("../tools");
function transformWidget(widget, options) {
    const textTransformParam = tools_1.findAndRemoveParam(widget, 'textTransform');
    if (textTransformParam && widget.params) {
        let transformationFunction;
        switch (textTransformParam.value) {
            case 'lowercase': {
                transformationFunction = 'toLowerCase';
                break;
            }
            case 'uppercase': {
                transformationFunction = 'toUpperCase';
                break;
            }
            default: {
                console.error(`text-transform value '${textTransformParam.value}' is not supported`);
                break;
            }
        }
        function applyTextTransformation(widget) {
            if (widget.originalName == 'text') {
                for (let param of widget.params) {
                    if (param.type == 'literal')
                        param.value = `'${param.value.toString()}'.${transformationFunction}()`;
                    if (param.type == 'expression')
                        param.value = `(${tools_1.unquote(param.value.toString())}).${transformationFunction}()`;
                    param.type = 'expression';
                }
            }
            tools_1.applyOnDescendants(widget, applyTextTransformation);
            return widget;
        }
        if (transformationFunction) {
            applyTextTransformation(widget);
        }
    }
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
