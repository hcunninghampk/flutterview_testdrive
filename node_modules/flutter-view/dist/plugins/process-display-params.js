"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const tools_1 = require("../tools");
/**
 * This plugin processes the **display** parameters.
 *
 * @param widget the widget tree to process
 * @param options the flutter-view options
 * @return the transformed widget tree
 */
function transformWidget(widget, options) {
    const childrenParam = tools_1.findParam(widget, 'children', true);
    if (childrenParam) {
        const params = [];
        const children = childrenParam.value;
        // we cannot remove while iterating the children, so we do this in two steps:
        // 1) find all the children to be removed
        for (let child of children) {
            const displayParam = tools_1.findAndRemoveParam(child, 'display', {
                includeResolved: true,
                includeExpressions: true
            });
            if (displayParam && displayParam.value == 'none') {
                params.push({
                    name: displayParam.value.toString(),
                    value: child
                });
            }
        }
        // 2) remove each param's widget from the children param widget
        for (let param of params) {
            lodash_1.pull(children, param.value);
        }
    }
    const childParam = tools_1.findParam(widget, 'child', true);
    if (childParam) {
        const child = childParam.value;
        const displayParam = tools_1.findAndRemoveParam(child, 'display');
        if (displayParam && displayParam.value == 'none') {
            tools_1.findAndRemoveParam(widget, 'child', {
                includeResolved: true,
                includeExpressions: true
            });
        }
    }
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
