"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const change_case_1 = require("change-case");
const lodash_1 = require("lodash");
const tools_1 = require("../tools");
/**
 * This plugin processes the **as** parameters.
 *
 * It finds all child/children widgets with the as="..." parameter,
 * and changes any of those widgets from child(ren) to direct parameters of
 * the name in the as parameter value.
 *
 * @param widget the widget tree to process
 * @param options the flutter-view options
 * @return the transformed widget tree
 */
function transformWidget(widget, options) {
    const childrenParam = tools_1.findParam(widget, 'children', true);
    if (childrenParam) {
        const params = [];
        const children = childrenParam.value;
        // we cannot remove while iterating the children, so we do this in two steps:
        // 1) find all the children to be moved, and what prop to put them 
        for (let child of children) {
            const asParam = tools_1.findAndRemoveParam(child, 'as');
            if (asParam) {
                params.push({
                    name: asParam.value.toString(),
                    value: child
                });
            }
        }
        // 2) remove each param's widget from the children param widget, and push it as a new named parameter
        for (let param of params) {
            lodash_1.pull(children, param.value);
            widget.params.push({
                class: 'param',
                type: 'widget',
                name: param.name !== 'value' ? change_case_1.camelCase(param.name) : undefined,
                value: param.value,
                resolved: false
            });
        }
    }
    const childParam = tools_1.findParam(widget, 'child', true);
    if (childParam) {
        const child = childParam.value;
        const asParam = tools_1.findAndRemoveParam(child, 'as');
        if (asParam) {
            if (childParam.name == 'value') {
                childParam.name = undefined;
            }
            else {
                childParam.name = change_case_1.camelCase(asParam.value.toString());
            }
        }
    }
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
