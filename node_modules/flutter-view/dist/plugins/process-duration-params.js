"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tools_1 = require("../tools");
/**
 * This plugin processes the **duration** parameters.
 *
 * It converts the a :duration-ms=10 into into :duration='Duration(milliseconds:10)'
 *
 * It does this for:
 * - duration-secs
 * - duration-ms
 *
 * @param widget the widget tree to process
 * @param options the flutter-view options
 * @return the transformed widget tree
 */
function transformWidget(widget, options) {
    const durationMsParam = tools_1.findAndRemoveParam(widget, 'durationMs');
    const durationSecParam = tools_1.findAndRemoveParam(widget, 'durationSec');
    const durationSecsParam = tools_1.findAndRemoveParam(widget, 'durationSecs');
    if (durationMsParam && durationMsParam.value) {
        widget.params.push({
            class: 'param',
            type: 'expression',
            name: 'duration',
            resolved: false,
            value: `Duration(milliseconds: ${durationMsParam.value.toString()})`
        });
    }
    if (durationSecParam && durationSecParam.value) {
        widget.params.push({
            class: 'param',
            type: 'expression',
            name: 'duration',
            resolved: false,
            value: `Duration(seconds: ${durationSecParam.value.toString()})`
        });
    }
    if (durationSecsParam && durationSecsParam.value) {
        widget.params.push({
            class: 'param',
            type: 'expression',
            name: 'duration',
            resolved: false,
            value: `Duration(seconds: ${durationSecsParam.value.toString()})`
        });
    }
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
