"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const change_case_1 = require("change-case");
const decode = require("decode-html");
const styleparser = require("style-parser");
const tools_1 = require("../tools");
/**
 * Parses style parameters generated from CSS, and transforms them into widget parameters
 * @param widget the widget and descendants to process
 * @param options the flutter-view options
 */
function transformWidget(widget, options) {
    const styleParam = tools_1.findAndRemoveParam(widget, 'style', {
        includeExpressions: false,
        includeResolved: true
    });
    if (styleParam && styleParam.value) {
        const style = styleParam.value;
        const styleRules = styleparser(style);
        for (const attr in styleRules) {
            let name = attr;
            if (tools_1.findParam(widget, name, true))
                continue;
            let value = styleRules[attr];
            let type = 'literal';
            if (attr.startsWith(':')) {
                type = 'expression';
                name = attr.substring(1);
            }
            if (tools_1.unquote(value).startsWith(':')) {
                type = 'expression';
                value = tools_1.unquote(value).substring(1);
            }
            // const themeStyle = parseThemeStyle(unquote(value))
            // if(themeStyle) {
            // 	type = 'expression'
            // 	value = themeStyle
            // }
            let resolved = false;
            if (value.startsWith('^')) {
                resolved = true;
                value = value.substring(1);
            }
            value = value.replace(' [', '['); // css adds space between name and block bracket
            widget.params.push({
                class: 'param',
                type: type,
                name: (name == 'value') ? undefined : change_case_1.camelCase(name),
                value: attr != value ? decode(value) : true,
                resolved: resolved
            });
        }
    }
    // also apply the plugin to the rest of the widget tree of this widget
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
