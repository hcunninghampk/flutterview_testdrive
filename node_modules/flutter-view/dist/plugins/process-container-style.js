"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tools_1 = require("../tools");
function transformWidget(widget, options) {
    if (widget.name == 'Container' || widget.name == 'AnimatedContainer') {
        if (!widget.params)
            widget.params = [];
        const backgroundColorParam = tools_1.findAndRemoveParam(widget, 'backgroundColor');
        const backgroundImageParam = tools_1.findAndRemoveParam(widget, 'backgroundImage');
        const backgroundRepeatParam = tools_1.findAndRemoveParam(widget, 'backgroundRepeat');
        const backgroundSizeParam = tools_1.findAndRemoveParam(widget, 'backgroundSize');
        const borderParam = tools_1.findAndRemoveParam(widget, 'border');
        const borderTopParam = tools_1.findAndRemoveParam(widget, 'borderTop');
        const borderRightParam = tools_1.findAndRemoveParam(widget, 'borderRight');
        const borderBottomParam = tools_1.findAndRemoveParam(widget, 'borderBottom');
        const borderLeftParam = tools_1.findAndRemoveParam(widget, 'borderLeft');
        const borderWidthParam = tools_1.findAndRemoveParam(widget, 'borderWidth');
        const borderStyleParam = tools_1.findAndRemoveParam(widget, 'borderStyle');
        const borderColorParam = tools_1.findAndRemoveParam(widget, 'borderColor');
        const borderRadiusParam = tools_1.findAndRemoveParam(widget, 'borderRadius');
        const boxShadowParam = tools_1.findAndRemoveParam(widget, 'boxShadow');
        const shapeParam = tools_1.findAndRemoveParam(widget, 'shape');
        // border
        let borders = {};
        if (borderParam && borderParam.value) {
            const border = tools_1.parseBorderStyle(borderParam.value.toString());
            borders.top = border;
            borders.right = border;
            borders.bottom = border;
            borders.left = border;
        }
        if (borderWidthParam && borderWidthParam.value) {
            const width = tools_1.parseStyleDoubleValue(borderWidthParam.value.toString());
            if (borders.top) {
                borders.top.width = width;
            }
            else
                borders.top = { width };
            if (borders.right) {
                borders.right.width = width;
            }
            else
                borders.right = { width };
            if (borders.bottom) {
                borders.bottom.width = width;
            }
            else
                borders.bottom = { width };
            if (borders.left) {
                borders.left.width = width;
            }
            else
                borders.left = { width };
        }
        if (borderStyleParam && borderStyleParam.value) {
            const style = tools_1.parseStyleDoubleValue(borderStyleParam.value.toString());
            if (borders.top) {
                borders.top.style = style;
            }
            else
                borders.top = { style };
            if (borders.right) {
                borders.right.style = style;
            }
            else
                borders.right = { style };
            if (borders.bottom) {
                borders.bottom.style = style;
            }
            else
                borders.bottom = { style };
            if (borders.left) {
                borders.left.style = style;
            }
            else
                borders.left = { style };
        }
        if (borderColorParam && borderColorParam.value) {
            const color = tools_1.parseStyleColor(borderColorParam.value.toString());
            if (borders.top) {
                borders.top.color = color;
            }
            else
                borders.top = { color };
            if (borders.right) {
                borders.right.color = color;
            }
            else
                borders.right = { color };
            if (borders.bottom) {
                borders.bottom.color = color;
            }
            else
                borders.bottom = { color };
            if (borders.left) {
                borders.left.color = color;
            }
            else
                borders.left = { color };
        }
        if (borderTopParam && borderTopParam.value) {
            const border = tools_1.parseBorderStyle(borderTopParam.value.toString());
            borders.top = border;
        }
        if (borderRightParam && borderRightParam.value) {
            const border = tools_1.parseBorderStyle(borderRightParam.value.toString());
            borders.right = border;
        }
        if (borderBottomParam && borderBottomParam.value) {
            const border = tools_1.parseBorderStyle(borderBottomParam.value.toString());
            borders.bottom = border;
        }
        if (borderLeftParam && borderLeftParam.value) {
            const border = tools_1.parseBorderStyle(borderLeftParam.value.toString());
            borders.left = border;
        }
        let borderWidget;
        if (Object.keys(borders).length > 0) {
            borderWidget = toBorderWidget(borders);
        }
        // image
        let imageWidget;
        if (backgroundImageParam && backgroundImageParam.value) {
            const imgLocation = tools_1.parseStyleUrl(backgroundImageParam.value.toString());
            if (imgLocation) {
                switch (imgLocation.type) {
                    case 'asset': {
                        imageWidget = {
                            class: 'widget',
                            name: options.tagClasses.backgroundAssetImg,
                            constant: false,
                            params: [
                                {
                                    class: 'param',
                                    resolved: false,
                                    type: 'literal',
                                    value: imgLocation.location
                                }
                            ]
                        };
                        break;
                    }
                    case 'url': {
                        imageWidget = {
                            class: 'widget',
                            name: options.tagClasses.backgroundUrlImg,
                            constant: false,
                            params: [
                                {
                                    class: 'param',
                                    resolved: false,
                                    type: 'literal',
                                    value: imgLocation.location
                                }
                            ]
                        };
                        break;
                    }
                }
            }
        }
        // decorationimage
        let decorationImageWidget;
        if (imageWidget) {
            decorationImageWidget = {
                class: 'widget',
                name: 'DecorationImage',
                constant: false,
                params: []
            };
            if (imageWidget)
                decorationImageWidget.params.push({
                    class: 'param',
                    name: 'image',
                    type: 'widget',
                    resolved: false,
                    value: imageWidget
                });
            if (backgroundRepeatParam && backgroundRepeatParam.value) {
                decorationImageWidget.params.push({
                    class: 'param',
                    name: 'repeat',
                    type: 'expression',
                    resolved: false,
                    value: tools_1.parseStyleRepeat(backgroundRepeatParam)
                });
            }
            if (backgroundSizeParam && backgroundSizeParam.value) {
                decorationImageWidget.params.push({
                    class: 'param',
                    name: 'fit',
                    type: 'expression',
                    resolved: false,
                    value: tools_1.parseStyleBackgroundSize(backgroundSizeParam)
                });
            }
        }
        // box decoration
        let boxDecorationWidget;
        if (borderWidget || backgroundColorParam || backgroundImageParam || decorationImageWidget || shapeParam || borderRadiusParam || boxShadowParam) {
            boxDecorationWidget = {
                class: 'widget',
                name: 'BoxDecoration',
                constant: false,
                params: []
            };
            if (decorationImageWidget)
                boxDecorationWidget.params.push({
                    class: 'param',
                    name: 'image',
                    resolved: false,
                    type: 'widget',
                    value: decorationImageWidget
                });
            if (borderWidget)
                boxDecorationWidget.params.push({
                    class: 'param',
                    name: 'border',
                    type: 'widget',
                    resolved: true,
                    value: borderWidget
                });
            if (backgroundColorParam && backgroundColorParam.value)
                boxDecorationWidget.params.push({
                    class: 'param',
                    name: 'color',
                    type: 'expression',
                    value: tools_1.parseStyleColor(tools_1.unquote(backgroundColorParam.value.toString())),
                    resolved: true
                });
            if (borderRadiusParam && borderRadiusParam.value)
                boxDecorationWidget.params.push({
                    class: 'param',
                    name: 'borderRadius',
                    type: 'expression',
                    value: tools_1.toBorderRadiusCode(borderRadiusParam),
                    resolved: true
                });
            if (shapeParam && shapeParam.value)
                boxDecorationWidget.params.push({
                    class: 'param',
                    name: 'shape',
                    type: 'expression',
                    value: tools_1.parsePropertyStyle('BoxShape', shapeParam),
                    resolved: true
                });
            if (boxShadowParam && boxShadowParam.value) {
                const values = boxShadowParam.value.toString().split(',');
                const boxShadows = values.map(value => toBoxShadow(tools_1.parseBoxShadow(value)));
                boxDecorationWidget.params.push({
                    class: 'param',
                    name: 'boxShadow',
                    type: 'array',
                    value: boxShadows,
                    resolved: true
                });
            }
        }
        if (boxDecorationWidget) {
            widget.params.push({
                class: 'param',
                name: 'decoration',
                type: 'widget',
                resolved: true,
                value: boxDecorationWidget
            });
        }
    }
    // also apply the plugin to the rest of the widget tree of this widget
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
function toBorderSizeWidget(border) {
    const borderSideWidget = {
        class: 'widget',
        name: 'BorderSide',
        constant: false,
        params: []
    };
    if (border.width)
        borderSideWidget.params.push({
            class: 'param',
            name: 'width',
            resolved: true,
            type: 'expression',
            value: border.width
        });
    if (border.style)
        borderSideWidget.params.push({
            class: 'param',
            name: 'style',
            resolved: true,
            type: 'expression',
            value: `BorderStyle.${border.style}`
        });
    if (border.color)
        borderSideWidget.params.push({
            class: 'param',
            name: 'color',
            resolved: true,
            type: 'expression',
            value: border.color
        });
    return borderSideWidget;
}
function toBorderWidget(borders) {
    const borderWidget = {
        class: 'widget',
        name: 'Border',
        constant: false,
        params: []
    };
    if (borders.top) {
        borderWidget.params.push({
            class: 'param',
            name: 'top',
            resolved: true,
            type: 'widget',
            value: toBorderSizeWidget(borders.top)
        });
    }
    if (borders.right) {
        borderWidget.params.push({
            class: 'param',
            name: 'right',
            resolved: true,
            type: 'widget',
            value: toBorderSizeWidget(borders.right)
        });
    }
    if (borders.bottom) {
        borderWidget.params.push({
            class: 'param',
            name: 'bottom',
            resolved: true,
            type: 'widget',
            value: toBorderSizeWidget(borders.bottom)
        });
    }
    if (borders.left) {
        borderWidget.params.push({
            class: 'param',
            name: 'left',
            resolved: true,
            type: 'widget',
            value: toBorderSizeWidget(borders.left)
        });
    }
    return borderWidget;
}
function toBoxShadow(boxShadow) {
    const params = [];
    params.push({
        class: 'param',
        type: 'expression',
        resolved: true,
        name: 'offset',
        value: `Offset(${boxShadow.hoffset}, ${boxShadow.voffset})`
    });
    if (boxShadow.color) {
        params.push({
            class: 'param',
            type: 'expression',
            resolved: true,
            name: 'color',
            value: boxShadow.color
        });
    }
    if (boxShadow.blur) {
        params.push({
            class: 'param',
            type: 'expression',
            resolved: true,
            name: 'blurRadius',
            value: boxShadow.blur
        });
    }
    if (boxShadow.spread) {
        params.push({
            class: 'param',
            type: 'expression',
            resolved: true,
            name: 'spreadRadius',
            value: boxShadow.spread
        });
    }
    return {
        class: 'widget',
        constant: false,
        name: 'BoxShadow',
        params: params
    };
}
