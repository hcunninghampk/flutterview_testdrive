"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tools_1 = require("../tools");
/**
 * This plugin processes the **active** tags.
 *
 * It replaces this:
 *
 * assign(name='someAssignment' :value='someValueOrCalculation')
 *     child
 *
 * With this:
 *
 * assign(name='someAssignment' :value='someValueOrCalculation')
 *     function(as='builder' params='context, someAssignment')
 *         child
 *
 * @param widget the widget tree to process
 * @param options the flutter-view options
 * @return the transformed widget tree
 */
function transformWidget(widget, options) {
    if (widget.name == 'Assign') {
        const nameParam = tools_1.findParam(widget, 'name', true);
        const valueParam = tools_1.findAndRemoveParam(widget, 'value', {
            includeExpressions: true,
            includeResolved: true
        });
        if (nameParam && valueParam) {
            valueParam.name = 'value';
            valueParam.originalName = 'value';
            widget.params.push(valueParam);
            const asParam = tools_1.findParam(widget, 'as', true);
            const children = tools_1.getWidgetChildren(widget);
            tools_1.findAndRemoveParam(widget, 'children', {
                includeExpressions: true,
                includeResolved: true
            });
            if (children.length > 0) {
                const functionWidget = {
                    class: 'widget',
                    name: 'Function',
                    constant: false,
                    params: [
                        {
                            class: 'param',
                            type: 'expression',
                            name: 'as',
                            value: 'builder',
                            resolved: false
                        },
                        {
                            class: 'param',
                            type: 'literal',
                            name: 'params',
                            value: `context, ${nameParam.value}`,
                            resolved: true
                        },
                        {
                            class: 'param',
                            type: 'widgets',
                            name: 'children',
                            value: children,
                            resolved: true
                        }
                    ]
                };
                widget.params.push({
                    class: 'param',
                    type: 'widget',
                    name: 'child',
                    resolved: true,
                    value: functionWidget
                });
                if (asParam)
                    widget.params.push(asParam);
            }
        }
    }
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
