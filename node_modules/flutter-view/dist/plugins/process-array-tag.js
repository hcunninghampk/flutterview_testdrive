"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tools_1 = require("../tools");
/**
 * This plugin processes the **array** tags.
 *
 * If a array tag is found, it replaces itself with its children.
 *
 * @param widget the widget tree to process
 * @param options the flutter-view options
 * @return the transformed widget tree
 */
function transformWidget(widget, options) {
    // we start looking from the perspective of the parent of the array widget,
    // so we can put the array children into this widget
    if (widget.params) {
        for (let param of widget.params) {
            if (param.type == 'widget' && param.value) {
                const slot = param.value;
                if (slot.name == 'Array') {
                    const children = tools_1.findParam(slot, 'children', true);
                    const flatten = tools_1.findParam(slot, 'flatten', true);
                    if (children) {
                        if (flatten) {
                            param.value = children.value;
                            param.type = 'widgets';
                        }
                        else {
                            param.value = children.value;
                            param.type = 'array';
                        }
                    }
                    else {
                        const child = tools_1.findParam(slot, 'child', true);
                        if (child) {
                            param.value = child.value;
                            param.type = 'widget';
                        }
                    }
                }
            }
        }
    }
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
