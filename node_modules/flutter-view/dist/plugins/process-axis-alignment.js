"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tools_1 = require("../tools");
function transformWidget(widget, options) {
    const mainAxisAlignmentParam = tools_1.findAndRemoveParam(widget, 'mainAxisAlignment');
    const crossAxisAlignmentParam = tools_1.findAndRemoveParam(widget, 'crossAxisAlignment');
    const mainAxisSizeParam = tools_1.findAndRemoveParam(widget, 'mainAxisSize');
    const crossAxisSizeParam = tools_1.findAndRemoveParam(widget, 'crossAxisSize');
    // MainAxisAlignment
    if (mainAxisAlignmentParam && mainAxisAlignmentParam.value) {
        widget.params.push({
            class: 'param',
            name: 'mainAxisAlignment',
            type: 'expression',
            value: tools_1.parseStyleMainAxisAlignment(mainAxisAlignmentParam),
            resolved: true
        });
    }
    if (crossAxisAlignmentParam && crossAxisAlignmentParam.value) {
        widget.params.push({
            class: 'param',
            name: 'crossAxisAlignment',
            type: 'expression',
            value: tools_1.parseStyleCrossAxisAlignment(crossAxisAlignmentParam),
            resolved: true
        });
    }
    if (mainAxisSizeParam && mainAxisSizeParam.value) {
        widget.params.push({
            class: 'param',
            name: 'mainAxisSize',
            type: 'expression',
            value: tools_1.parseStyleMainAxisSize(mainAxisSizeParam),
            resolved: true
        });
    }
    if (crossAxisSizeParam && crossAxisSizeParam.value) {
        widget.params.push({
            class: 'param',
            name: 'crossAxisSize',
            type: 'expression',
            value: tools_1.parseStyleCrossAxisSize(crossAxisSizeParam),
            resolved: true
        });
    }
    // also apply the plugin to the rest of the widget tree of this widget
    tools_1.applyOnDescendants(widget, descendant => transformWidget(descendant, options));
    return widget;
}
exports.transformWidget = transformWidget;
