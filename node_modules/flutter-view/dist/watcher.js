#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const gaze = require("gaze");
const htmlparser = require("htmlparser");
const juice = require("juice");
const fs = require("mz/fs");
const node_sass_1 = require("node-sass");
const path_1 = require("path");
const pugcodegen = require("pug-code-gen");
const puglex = require("pug-lexer");
const puglinker = require("pug-linker");
const pugload = require("pug-load");
const pugparse = require("pug-parser");
const pugwrap = require("pug-runtime/wrap");
const compiler_1 = require("./compiler");
const removeEmptyChildren = require("./plugins/remove-empty-children");
const renderer_1 = require("./renderer");
const tools_1 = require("./tools");
const defaultOptions = {
    indentation: 2,
    plugins: [
        "./plugins/add-constructor-params",
        "./plugins/styles-to-params",
        "./plugins/process-display-params",
        "./plugins/process-theme-style",
        "./plugins/process-duration-params",
        "./plugins/process-scoped-animation-tag",
        "./plugins/process-scoped-tag",
        "./plugins/process-reactive-tag",
        "./plugins/process-assign-tag",
        "./plugins/process-builder-tag",
        "./plugins/process-as-param",
        "./plugins/process-array-tag",
        "./plugins/automatic-columns",
        "./plugins/process-container-text-style",
        "./plugins/process-container-style",
        "./plugins/process-layout-style",
        "./plugins/process-color-style",
        "./plugins/process-positioned-tag",
        "./plugins/process-axis-alignment",
        "./plugins/process-text",
        "./plugins/process-number-properties",
        "./plugins/process-boolean-properties"
    ],
    imports: [
        'package:flutter/material.dart',
        'package:flutter/cupertino.dart'
    ],
    tagClasses: {
        text: 'Text',
        div: 'Container',
        span: 'Wrap',
        button: 'RaisedButton',
        backgroundAssetImg: 'ExactAssetImage',
        backgroundUrlImg: 'NetworkImage'
    },
    multiChildClasses: [
        'Row',
        'Column',
        'Stack',
        'IndexedStack',
        'GridView',
        'Flow',
        'Table',
        'Wrap',
        'ListBody',
        'ListView',
        'CustomMultiChildLayout',
        'ButtonBar'
    ],
    autowrapChildren: true,
    autowrapChildrenClass: 'Column',
    showPugLineNumbers: true,
    showCommentsInDart: true,
    reportErrorsInDart: true,
    propagateDelete: true,
    debug: {
        logHTML: false,
        logHtmlAST: false,
        logDartPreAST: false,
        logDartPostAST: false,
        logCode: false,
        logErrorStack: false
    }
};
function startWatching(dir, configFileName, watch) {
    let options;
    let plugins;
    function loadOptions() {
        options = tools_1.clone(defaultOptions);
        if (fs.existsSync(configFileName)) {
            const loadedOptions = JSON.parse(fs.readFileSync(configFileName).toString());
            options = tools_1.merge(options, loadedOptions);
        }
        plugins = [];
        if (options && options.plugins) {
            for (let plugin of options.plugins) {
                try {
                    const pluginFn = require(plugin);
                    plugins.push(pluginFn);
                }
                catch (e) {
                    console.error(`error loading ${plugin}`, e);
                }
            }
        }
    }
    loadOptions();
    gaze('**/*.+(pug|htm|html|sass|css)', { cwd: dir }, (err, watcher) => {
        function processAllWatched() {
            const dirs = watcher.watched();
            for (var dir of Object.keys(dirs)) {
                for (var sourceFile of dirs[dir]) {
                    if (path_1.extname(sourceFile).length > 0) {
                        processFile(sourceFile, false)
                            .then(dartFile => { if (dartFile)
                            console.log('updated', path_1.relative(process.cwd(), dartFile)); })
                            .catch(error => reportError(sourceFile, error, options));
                    }
                }
            }
        }
        // process all watched files once
        processAllWatched();
        // stop if we do not want to keep watching
        if (!watch) {
            watcher.close();
            return;
        }
        // process again if flutter-view updates
        gaze('flutter-view.json', (err, watcher) => {
            watcher.on('changed', sourceFile => {
                console.log('flutter-view updated');
                loadOptions();
                processAllWatched();
            });
        });
        // watch for changes
        watcher.on('added', sourceFile => {
            processFile(sourceFile, true)
                .then(dartFile => { if (dartFile)
                console.log('added', path_1.relative(process.cwd(), dartFile)); })
                .catch(error => reportError(sourceFile, error, options));
        });
        watcher.on('changed', sourceFile => {
            processFile(sourceFile, true)
                .then(dartFile => { if (dartFile)
                console.log('updated', path_1.relative(process.cwd(), dartFile)); })
                .catch(error => reportError(sourceFile, error, options));
        });
        watcher.on('deleted', sourceFile => {
            if (options.propagateDelete) {
                const p = path_1.parse(sourceFile);
                const dartFile = `${p.dir}/${p.name}.dart`;
                if (fs.existsSync(dartFile)) {
                    fs.unlinkSync(dartFile);
                    console.log('deleted', path_1.relative(process.cwd(), dartFile));
                }
            }
        });
    });
    function renderPugFileAsHtml(file) {
        const templateName = 'flutter';
        const parsed = pugload.file(file, {
            lex: puglex,
            parse: pugparse,
            basedir: dir
        });
        const linked = puglinker(parsed);
        addPugLineAttributes(linked);
        const codegenfn = pugcodegen(linked, {
            compileDebug: false,
            pretty: true,
            inlineRuntimeFunctions: false,
            templateName
        });
        const pugTemplate = pugwrap(codegenfn, templateName);
        return pugTemplate();
    }
    function addPugLineAttributes(block) {
        const tags = block.nodes.filter(node => node.type == 'Tag');
        for (let tag of tags) {
            if (!tag.line)
                continue;
            tag.attrs = tag.attrs || [];
            tag.attrs.push({
                name: 'pug-line',
                val: `"${tag.line},${tag.column}"`,
                mustEscape: true
            });
            if (tag.block)
                addPugLineAttributes(tag.block);
        }
    }
    function processFile(file, isUpdate) {
        return __awaiter(this, void 0, void 0, function* () {
            const relativeFile = path_1.relative(process.cwd(), file);
            // extract the html from the file, depending on the type
            let html;
            switch (path_1.extname(file)) {
                case '.pug': {
                    html = renderPugFileAsHtml(file);
                    // html = await renderFile(file)
                    break;
                }
                case '.htm':
                case '.html': {
                    html = fs.readFileSync(file).toString();
                    break;
                }
                case '.css':
                case '.sass': {
                    if (isUpdate) {
                        const p = path_1.parse(path_1.relative(process.cwd(), file));
                        const pugFile = `${p.dir}/${p.name}.pug`;
                        const htmlFile = `${p.dir}/${p.name}.html`;
                        if (fs.existsSync(pugFile)) {
                            return yield processFile(pugFile, isUpdate);
                        }
                        else if (fs.existsSync(htmlFile)) {
                            return yield processFile(htmlFile, isUpdate);
                        }
                    }
                    return null;
                }
            }
            if (!html) {
                if (options.debug && options.debug.logHTML)
                    console.debug(`no html found in file ${file}`);
                return null;
            }
            if (options.debug && options.debug.logHTML)
                console.debug(relativeFile, 'HTML:\n' + html);
            // convert the html into an abstract syntax tree
            const ast = yield processHtml(file, html);
            if (!ast)
                throw `no ast found in html of file ${file}`;
            if (options.debug && options.debug.logHtmlAST)
                console.debug(relativeFile, 'HTML AST:\n' + JSON.stringify(ast, null, 3));
            // convert the html ast into a dart widget tree to render
            const compiled = compiler_1.compile(ast, options);
            if (options.debug && options.debug.logDartPreAST)
                console.debug(relativeFile, 'Dart Pre-process AST:\n' + JSON.stringify(compiled, null, 3));
            // convert the html ast into a dart widget tree to render
            const widgets = compiled.map(widget => {
                let result = widget;
                for (let plugin of plugins) {
                    result = plugin.transformWidget(result, options);
                }
                result = removeEmptyChildren.transformWidget(result, options);
                return result;
            });
            if (options.debug && options.debug.logDartPostAST)
                console.debug(relativeFile, 'Dart Post-process AST:\n' + JSON.stringify(widgets, null, 3));
            // extract the imports to use from the ast
            const imports = compiler_1.extractImports(ast);
            // convert the widget tree with imports into dart source code
            const p = path_1.parse(file);
            const dartFile = `${p.dir}/${p.name}.dart`;
            const relativeDartFile = path_1.relative(process.cwd(), dartFile);
            const code = renderer_1.renderDartFile(relativeDartFile, widgets, imports, options);
            if (options.debug && options.debug.logCode)
                console.debug(relativeFile, 'Code:\n' + code);
            // save the code
            fs.writeFileSync(dartFile, code);
            return dartFile;
        });
    }
    function processHtml(file, html) {
        return __awaiter(this, void 0, void 0, function* () {
            // transform the html into an abstract syntax tree
            let ast = yield parse(html);
            // try to find a matching css or sass file
            const p = path_1.parse(file);
            let css;
            const sassFile = `${p.dir}/${p.name}.sass`;
            const cssFile = `${p.dir}/${p.name}.css`;
            if (fs.existsSync(sassFile)) {
                const cssResult = node_sass_1.renderSync({
                    file: sassFile,
                    includePaths: [process.cwd() + '/lib'],
                    outputStyle: 'expanded',
                    indentedSyntax: true
                });
                css = cssResult.css.toLocaleString();
            }
            else if (fs.existsSync(cssFile)) {
                css = fs.readFileSync(cssFile).toString();
            }
            if (css) {
                // merge the css styles into the html
                const mergedHtml = juice.inlineContent(html, css, {
                    xmlMode: false,
                    webResources: {
                        relativeTo: process.cwd() + '/lib'
                    }
                });
                return yield parse(mergedHtml);
            }
            else {
                return yield parse(html);
            }
            function parse(htm) {
                return __awaiter(this, void 0, void 0, function* () {
                    return yield new Promise(function (resolve, reject) {
                        const handler = new htmlparser.DefaultHandler(function (error, dom) {
                            if (error)
                                reject(error);
                            else
                                resolve(dom);
                        }, { verbose: false, ignoreWhitespace: true });
                        new htmlparser.Parser(handler).parseComplete(htm);
                    });
                });
            }
        });
    }
    function reportError(file, error, options) {
        try {
            console.error('Error on processing', path_1.relative(process.cwd(), file) + ':');
            console.error(error.toString());
            if (options.debug && options.debug.logErrorStack) {
                console.error(error.stack);
            }
            if (options.reportErrorsInDart) {
                const errorLines = error.toString().split('\\n');
                const commentedLines = errorLines.map(line => ` * ${line}`);
                const errorCode = tools_1.multiline('/*', commentedLines.join('\n'), '*/', '', 'false // intentional dart error');
                const p = path_1.parse(file);
                const dartFile = `${p.dir}/${p.name}.dart`;
                fs.writeFileSync(dartFile, errorCode);
            }
        }
        catch (e) {
            console.error(`error handling error ${error} on file ${file}.`);
        }
    }
}
exports.startWatching = startWatching;
